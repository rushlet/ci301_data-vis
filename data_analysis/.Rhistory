dates <- as.Date(all_tracks$date, "%d/%m/%y")
print(dates)
print(all_tracks$date)
all_tracks <- read.csv('data/fixed_data_for_analysis.csv')
typeOf(all_tracks$date)
averages_by_year <- aggregate(audio_features, by=list(strftime(all_tracks$date, "%Y")), FUN=mean, na.rm=TRUE) #mean for each year
print(averages_by_year)
averages_by_year <- aggregate(all_tracks_attributes, by=list(strftime(all_tracks$date, "%Y")), FUN=mean, na.rm=TRUE) #mean for each year
all_tracks <- read.csv('fixed_data_for_analysis.csv')
all_tracks_attributes = subset(all_tracks, select = -c(1,2,3:4,7,17:18) ) #make subset of data with only the columns to be averaged by decade
averages_by_year <- aggregate(all_tracks_attributes, by=list(strftime(all_tracks$date, "%Y")), FUN=mean, na.rm=TRUE) #mean for each year
print(averages_by_year)
attributes_by_year <- audio_features %>% group_by(date=floor_date(date, "year")) %>%
summarize(amount=mean(valence))
install.packages("lubridate") # for working with dates
library("lubridate")
attributes_by_year <- audio_features %>% group_by(date=floor_date(date, "year")) %>%
summarize(amount=mean(valence))
print(attributes_by_year)
attributes_by_year <- audio_features %>% group_by(date=floor_date(date, "year"))
print(attributes_by_year)
attributes_by_year <- group_by(audio_features, date=floor_date(date, "year"))
print(attributes_by_year)
View(attributes_by_year)
all_tracks <- read.csv('data/fixed_data_for_analysis.csv')
audio_features <- subset(all_tracks, select = c(2, 3, 5:19))
View (audio_features)
attributes_by_year <- group_by(audio_features, date=floor_date(date, "year"))
View(attributes_by_year)
attributes_by_year <- format(as.Date(audio_features$Date, format="%d/%m/%Y"),"%Y")
attributes_by_year <- format(as.Date(audio_features$date, format="%d/%m/%Y"),"%Y")
View(attributes_by_year)
View(audio_features)
audio_features$date <- dmy(audio_features$date)
View(audio_features)
audio_features$year <- y(audio_features$date)
audio_features$year <- year(audio_features$date)
View(audio_features)
averages_by_year <- aggregate(audio_features, by=list(year), FUN=mean, na.rm=TRUE) #mean for each year
averages_by_year <- aggregate(audio_features, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each year
data_for_averages_by_year <-  subset(audio_features, select = c(3:19))
ncolumn(audio_features)
ncol(audio_features)
data_for_averages_by_year <-  subset(audio_features, select = c(3:18))
averages_by_year <- aggregate(audio_features, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each year
data_for_averages_by_year <-  subset(audio_features, select = c(3:14, 18))
averages_by_year <- aggregate(audio_features, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each year
decade_averages_subset <- subset(all_tracks, select = c(5:16, 18:21))
decade_averages <- aggregate(decade_averages_subset, by=list(all_tracks$decade), FUN=mean, na.rm=TRUE) #mean for each decade
print(decade_averages)
View(decade_averages_subset)
data_for_averages_by_year <-  subset(audio_features, select = c(3:18))
averages_by_year <- aggregate(data_for_averages_by_year, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each year
View(data_for_averages_by_year)
data_for_averages_by_year <-  subset(audio_features, select = c(3:14, 16:18))
View(data_for_averages_by_year)
averages_by_year <- aggregate(data_for_averages_by_year, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each year
decade_averages_subset$year <- year(decade_averages_subset$date)
decade_averages_subset$date <- dmy(decade_averages_subset$date) #format date as a date type using lubridate library
decade_averages_subset$date <- dmy(decade_averages_subset$date) #format date as a date type using lubridate library
View(decade_averages_subset)
decade_averages_subset <- subset(all_tracks, select = c(5:16, 17:21))
View(decade_averages_subset)
decade_averages <- aggregate(decade_averages_subset, by=list(all_tracks$decade), FUN=mean, na.rm=TRUE) #mean for each decade
decade_averages_subset$date <- dmy(decade_averages_subset$date) #format date as a date type using lubridate library
decade_averages_subset$year <- year(decade_averages_subset$date)
year_averages <- aggregate(decade_averages_subset, by=list(all_tracks$year), FUN=mean, na.rm=TRUE) #mean for each decade
year_averages <- aggregate(decade_averages_subset, by=list(decade_averages$year), FUN=mean, na.rm=TRUE) #mean for each decade
year_averages <- aggregate(decade_averages_subset, by=list(decade_averages_subset$year), FUN=mean, na.rm=TRUE) #mean for each decade
averages_by_year <- aggregate(data_for_averages_by_year, by=list(data_for_averages_by_year$year), FUN=mean, na.rm=TRUE) #mean for each year
print(averages_by_year)
valence_by_year <- ggplot(averages_by_year, aes(x = Group.1, y = valence)) + geom_line(aes(), group = 1) + geom_smooth(method='lm',formula=y~x) + scale_x_discrete(breaks=seq(1950, 2200, 5))
valence_by_year
valence_year_least <- arrange(averages_by_year, valence)
valence_year_least <- head(valence_year_least, 10)
print (valence_year_least)
decade_averages <- aggregate(decade_averages_subset, by=list(all_tracks$decade), FUN=mean, na.rm=TRUE) #mean for each decade
print(decade_averages)
danceability_by_year <- ggplot(averages_by_year, aes(x = Group.1, y = danceability)) + geom_line(aes(), group = 1) + geom_smooth(method='lm',formula=y~x) + scale_x_discrete(breaks=seq(1950, 2200, 5))
danceability_year_most <- arrange(averages_by_year, danceability)
danceability_year_most <- head(danceability_year_most, 10)
print (danceability_year_most)
danceability_by_year
danceability_year_most <- arrange(averages_by_year, asc(danceability))
danceability_year_most <- arrange(averages_by_year, desc(danceability))
danceability_year_most <- head(danceability_year_most, 10)
print (danceability_year_most)
artists_with_8_or_more_number_ones <- subset(unique_artists, track_count >= 8)
print(artists_with_8_or_more_number_ones)
unique_artists <- read.csv('data/unique_artists_track_count.csv')
total_artists <- nrow(unique_artists)
print(total_artists)
most_common_artists <- subset(unique_artists, track_count >= 5)
View(most_common_artists)
most_common_artists <- group_by(most_common_artists, track_count) %>% arrange(desc(track_count))
number_of_artists_with_5_or_more_tracks <- nrow(most_common_artists)
print(number_of_artists_with_5_or_more_tracks)
number_of_tracks_from_most_common_artists <- sum(most_common_artists$track_count)
print(number_of_tracks_from_most_common_artists)
total_weeks_from_most_common_artists <- sum(most_common_artists$total_weeks)
print(total_weeks_from_most_common_artists)
top_10_artists <- head(most_common_artists, 10)
print (top_10_artists)
artists_ten_plus_weeks <- group_by(unique_artists, total_weeks) %>% arrange(desc(total_weeks))
artists_ten_plus_weeks <- head(artists_ten_plus_weeks, 10)
print (artists_ten_plus_weeks)
artists_with_8_or_more_number_ones <- subset(unique_artists, track_count >= 8)
print(artists_with_8_or_more_number_ones)
artists_with_8_or_more_number_ones <- subset(unique_artists, track_count >= 8, select = c(1))
print(artists_with_8_or_more_number_ones)
songs_by_artists_with_8_plus <- merge(artists_with_8_or_more_number_ones,all_tracks,by='artist')
View(songs_by_artists_with_8_plus)
eminem_songs <- filter(songs_by_artists_with_8_plus, artist == "EMINEM")
eminem_valence_spread <- max(valence) - min(valence)
eminem_valence_spread <- max(eminem_songs$valence) - min(eminem_songs$valence
print(eminem_valence_spread)
eminem_songs <- filter(songs_by_artists_with_8_plus, artist == "EMINEM")
eminem_valence_spread <- max(eminem_songs$valence) - min(eminem_songs$valence)
print(eminem_valence_spread)
print(i)
for(i in artists_with_8_or_more_number_ones){
print(i)
findRanges(songs_by_artists_with_8_plus, i)
}
print(artist)
for(artist in artists_with_8_or_more_number_ones){
print(artist)
findRanges(songs_by_artists_with_8_plus, i)
}
for(artist in artists_with_8_or_more_number_ones){
print(artist)
#findRanges(songs_by_artists_with_8_plus, i)
}
for(artist in artists_with_8_or_more_number_ones){
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
findRanges <- function(dataset, artist) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
print(artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
}
for(artist in artists_with_8_or_more_number_ones){
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
artist_ranges <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
artist_ranges <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
findRanges <- function(dataset, artist) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
artist_ranges <- rbind(artist_ranges, "artist" = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
}
for(artist in artists_with_8_or_more_number_ones){
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
print artist_ranges
print (artist_ranges)
artist_ranges <- data.frame(artist=as.Date(character()),
valence_range=character(),
danceability_range=character(),
energy_range=character(),
acoustic_range=character(),
stringsAsFactors=FALSE)
findRanges <- function(dataset, artist) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
artist_ranges <- rbind(artist_ranges, "artist" = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
}
for(artist in artists_with_8_or_more_number_ones){
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
for(artist in artists_with_8_or_more_number_ones){
print(i)
findRanges(songs_by_artists_with_8_plus, artist)
}
count <- 0
for(artist in artists_with_8_or_more_number_ones){
count <- count++
print(count)
findRanges(songs_by_artists_with_8_plus, artist)
}
count <- 0
for(artist in artists_with_8_or_more_number_ones){
count <- count+1
print(count)
findRanges(songs_by_artists_with_8_plus, artist)
}
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
artist_ranges <- rbind(artist_ranges, count = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
}
count <- 0
for(artist in artists_with_8_or_more_number_ones){
count <- count+1
print(count)
findRanges(songs_by_artists_with_8_plus, artist, count)
}
print (artist_ranges)
artist_ranges <- data.frame(artist=as.Date(character()),
valence_range=character(),
danceability_range=character(),
energy_range=character(),
acoustic_range=character(),
stringsAsFactors=FALSE)
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
artist_ranges.df <- data.frame(artist=as.Date(character()),
valence_range=character(),
danceability_range=character(),
energy_range=character(),
acoustic_range=character(),
stringsAsFactors=FALSE)
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
for(artists_with_8_or_more_number_ones$artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges.df)
artist_ranges <- list()
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(valenceRange, danceabilityRange, energyRange, acousticnessRange)
dat$artist <- artist
artist_ranges[[artist]] <- dat # add it to your list
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
dat <- data.frame(valenceRange, danceabilityRange, energyRange, acousticnessRange)
artist_ranges <- list()
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- artist
artist_ranges[[artist]] <- dat # add it to your list
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
findRanges <- function(dataset, artist, count) {
artist_songs <- filter(dataset, artist == artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- artist
artist_ranges[[artist]] <- dat # add it to your list
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
findRanges <- function(dataset, current_artist, count) {
artist_songs <- filter(dataset, artist == current_artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(current_artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- artist
artist_ranges[[artist]] <- dat # add it to your list
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
findRanges <- function(dataset, current_artist, count) {
artist_songs <- filter(dataset, artist == current_artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(current_artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- current_artist
artist_ranges[[current_artist]] <- dat # add it to your list
}
for(artist in artists_with_8_or_more_number_ones){
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:ncol(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones[i]
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
findRanges <- function(dataset, current_artist) {
print(current_artist)
artist_songs <- filter(dataset, artist == current_artist)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
#artist_ranges.df <- rbind(artist_ranges.df, artist = c(valenceRange, danceabilityRange, energyRange, acousticnessRange))
dat <- data.frame(current_artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- current_artist
artist_ranges[[current_artist]] <- dat # add it to your list
}
for(i in 1:ncol(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones[i]
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:ncol(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones[i]$artist
findRanges(songs_by_artists_with_8_plus, artist)
}
findRanges <- function(dataset, current_artist) {
print(current_artist)
artist_songs <- filter(dataset, artist == current_artist)
print(artist_songs)
valenceRange <- max(artist_songs$valence) - min(artist_songs$valence)
danceabilityRange <- max(artist_songs$danceability) - min(artist_songs$danceability)
energyRange <- max(artist_songs$energy) - min(artist_songs$energy)
acousticnessRange <- max(artist_songs$acousticness) - min(artist_songs$acousticness)
dat <- data.frame(current_artist, valenceRange, danceabilityRange, energyRange, acousticnessRange)
print(dat)
dat$artist <- current_artist
artist_ranges[[current_artist]] <- dat # add it to your list
}
for(i in 1:ncol(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones[i]$artist
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:ncol(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones[i]$artist
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
artist <- artists_with_8_or_more_number_ones$artist
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
row <- artists_with_8_or_more_number_ones[i,]
artist <- row$artist
print(artist)
#findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
row <- artists_with_8_or_more_number_ones[i,]
print(row)
#artist <- row$artist
#print(artist)
#findRanges(songs_by_artists_with_8_plus, artist)
}
row <- artists_with_8_or_more_number_ones[i,1]
print(row)
row <- artists_with_8_or_more_number_ones[i,]
print(row)
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
row <- artists_with_8_or_more_number_ones[i,]
print(row)
#artist <- row$artist
#print(artist)
#findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
row <- artists_with_8_or_more_number_ones[i,1]
print(row)
#artist <- row$artist
#print(artist)
#findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
row <- artists_with_8_or_more_number_ones[i,]$artist
print(row)
#artist <- row$artist
#print(artist)
#findRanges(songs_by_artists_with_8_plus, artist)
}
ddply(artists_with_8_or_more_number_ones, .(artist), findRanges(songs_by_artists_with_8_plus, artist))
apply(artists_with_8_or_more_number_ones, .(artist), findRanges(songs_by_artists_with_8_plus, artist))
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
#row <- artists_with_8_or_more_number_ones[i,]
artist <- get(artist)
#print(row)
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
#row <- artists_with_8_or_more_number_ones[i,]
artist <- get("artist")
#print(row)
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
for(i in 1:nrow(artists_with_8_or_more_number_ones)){
#row <- artists_with_8_or_more_number_ones[i,]
artist <- get("artist")
#print(row)
print(artist)
findRanges(songs_by_artists_with_8_plus, artist)
}
print (artist_ranges)
eminem_songs <- filter(songs_by_artists_with_8_plus, artist == "EMINEM")
eminem_valence_spread <- max(eminem_songs$valence) - min(eminem_songs$valence)
eminem_danceability_spread <- max(eminem_songs$danceability) - min(eminem_songs$danceability)
eminem_acousticness_spread <- max(eminem_songs$acousticness) - min(eminem_songs$acousticness)
print(eminem_valence_spread)
print(eminem_danceability_spread)
print(eminem_acousticness_spread)
eminem_energy_spread <- max(eminem_songs$energy) - min(eminem_songs$energy)
print(eminem_energy_spread)
abba_songs <- filter(songs_by_artists_with_8_plus, artist == "ABBA")
abba_valence_spread <- max(abba_songs$valence) - min(abba_songs$valence)
abba_danceability_spread <- max(abba_songs$danceability) - min(abba_songs$danceability)
abba_acousticness_spread <- max(abba_songs$acousticness) - min(abba_songs$acousticness)
abba_energy_spread <- max(abba_songs$energy) - min(abba_songs$energy)
print(abba_valence_spread)
print(abba_danceability_spread)
print(abba_acousticness_spread)
print(abba_energy_spread)
elvis_songs <- filter(songs_by_artists_with_8_plus, artist == "ELVIS")
elvis_valence_spread <- max(elvis_songs$valence) - min(elvis_songs$valence)
elvis_danceability_spread <- max(elvis_songs$danceability) - min(elvis_songs$danceability)
elvis_acousticness_spread <- max(elvis_songs$acousticness) - min(elvis_songs$acousticness)
elvis_energy_spread <- max(elvis_songs$energy) - min(elvis_songs$energy)
elvis_songs <- filter(songs_by_artists_with_8_plus, artist == "ELVIS")
elvis_valence_spread <- max(elvis_songs$valence) - min(elvis_songs$valence)
print(artists_with_8_or_more_number_ones)
View(songs_by_artists_with_8_plus)
top_10_artists <- head(most_common_artists, 10)
print (top_10_artists)
artists_ten_plus_weeks <- group_by(unique_artists, total_weeks) %>% arrange(desc(total_weeks))
artists_ten_plus_weeks <- head(artists_ten_plus_weeks, 10)
print (artists_ten_plus_weeks)
View(artists_most_weeks)
artists_most_weeks <- group_by(unique_artists, total_weeks) %>% arrange(desc(total_weeks))
artists_most_weeks <- head(artists_ten_plus_weeks, 10)
View(artists_most_weeks)
print
artists_most_weeks <- group_by(unique_artists, total_weeks) %>% arrange(desc(total_weeks))
artists_most_weeks <- head(artists_ten_plus_weeks, 10)
print (artists_most_weeks)
rmarkdown::render("article_content.R")
install.packages("dplyr")
rmarkdown::render("article_content.R")
install.packages("ggplot2")
install.packages("ggplot2")
